{"version":3,"sources":["../../src/runner.js"],"names":[],"mappings":";;;;;;kBAAe,IAAI;;;;wBACE,WAAW;;;;sBACb,QAAQ;;;;oBACV,MAAM;;;;qBAC4B,SAAS;;sBACjC,UAAU;;;;;;oBAGd,MAAM;;;;AAG7B,SAAS,qBAAqB,CAAC,UAAU,EAAE;AACzC,MAAI,IAAI,GAAG,UAAU,CAAC;;AAEtB,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,GAAG,qBAAc,CAAC;AACjE,MAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;;AAE9B,SAAO;AACL,eAAW,EAAE,WAAW;AACxB,eAAW,EAAE,YAAY,CAAC,CAAC,CAAC;AAC5B,eAAW,EAAE,sBAAS,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;GAC/C,CAAC;CACH;;AAED,SAAS,sBAAsB,CAAC,MAAM,EAAE;;;AAGtC,SAAO,oBAAO,GAAG,CACf,oBAAO,MAAM,CACX,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,iBAEzB,EACD,qBAAqB,CACtB,CAAC;CACH;;AAED,SAAS,gBAAgB,CAAC,QAAQ,EAAE;AAClC,MAAM,YAAY,GAAG,oBAAa,gBAAG,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;;AAErE,SAAO,sBAAsB,CAAC,YAAY,CAAC,CAAC;CAC7C;;AAED,SAAS,WAAW,CAAC,MAAM,EAAE,QAAQ,EAAE;AACrC,MAAM,SAAS,GAAG,oBAAO,MAAM,CAC7B,kBAAK,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,YAAY,CAAC,qBAE7C,CAAC;;AAEF,sBAAO,IAAI,CACT,oBAAO,OAAO,CACZ,oBAAO,GAAG,CAAC,SAAS,EAAE,gBAAgB,CAAC,CACxC,EACD,QAAQ,CACT,CAAC;CACH;;qBAEc,UAAS,MAAM,EAAE;AAC9B,UAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAW;AACnC,eAAW,CAAC,MAAM,EAAE,UAAS,IAAI,EAAE;AACjC,QAAE,CAAC,IAAI,CAAC,WAAW,EAAE,YAAW;AAC9B,4BACE,IAAI,CAAC,WAAW,EAChB,MAAM,CAAC,MAAM,EACb,UAAS,SAAS,EAAE;AAClB,mBAAS,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC1C,CACF,CAAC;OACH,CAAC,CAAC;KACJ,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ","file":"runner.js","sourcesContent":["import fs from 'fs';\nimport cleanCSS from 'clean-css';\nimport lodash from 'lodash';\nimport glob from 'glob';\nimport { trimNewlines, isEmpty, isEmptyFile } from './utils';\nimport stylusRenderer from './stylus';\n\n/* eslint-disable */ /* jshint ignore:start */\nimport { should } from 'chai';\n/* jshint ignore:end */ /* eslint-enable */\n\nfunction extractTestFromString(testString) {\n  let test = testString;\n\n  const description = test.match(/.*/)[0];\n  const stylusAndCss = test.split(/.*@expect.*/).map(trimNewlines);\n  test = test.replace(/.*/, '');\n\n  return {\n    description: description,\n    givenStylus: stylusAndCss[0],\n    expectedCss: cleanCSS.process(stylusAndCss[1]),\n  };\n}\n\nfunction extractTestsFromString(string) {\n  //  Filter empty strings out, it seems that the\n  //  @it line leaves an empty string entry behind in the array\n  return lodash.map(\n    lodash.reject(\n      string.split(/.*@it\\s?/),\n      isEmpty\n    ),\n    extractTestFromString\n  );\n}\n\nfunction getTestsFromFile(filePath) {\n  const fileContents = trimNewlines(fs.readFileSync(filePath, 'utf8'));\n\n  return extractTestsFromString(fileContents);\n}\n\nfunction forEachTest(config, callback) {\n  const testFiles = lodash.reject(\n    glob.sync(config.testDirPath + '/**/*.styl'),\n    isEmptyFile\n  );\n\n  lodash.each(\n    lodash.flatten(\n      lodash.map(testFiles, getTestsFromFile)\n    ),\n    callback\n  );\n}\n\nexport default function(config) {\n  describe(config.describe, function() {\n    forEachTest(config, function(test) {\n      it(test.description, function() {\n        stylusRenderer(\n          test.givenStylus,\n          config.stylus,\n          function(actualCss) {\n            actualCss.should.equal(test.expectedCss);\n          }\n        );\n      });\n    });\n  });\n}\n"]}