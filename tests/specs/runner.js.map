{"version":3,"sources":["../../src/runner.js"],"names":[],"mappings":";;;;;QASgB,gBAAgB,GAAhB,gBAAgB;;kBAsCjB,UAAS,MAAM,EAAE;AAC9B,aAAW,CAAC,MAAM,EAAE,UAAS,WAAW,EAAE;;AAExC,YAAQ,CAAC,WAAW,CAAC,MAAM,EAAE,YAAW;AACtC,cAAQ,CAAC,WAAW,CAAC,KAAK,EAAE,YAAW;;;;;AAKrC,wBAAgB,CAAC,WAAW,CAAC,UAAU,EAAE,UAAS,IAAI,EAAE;AACtD,YAAE,CAAC,IAAI,CAAC,SAAS,EAAE,YAAW;AAC5B,gBAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;WAClB,CAAC,CAAC;SACJ,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ;;;;;;;;;;;;;;;;;;;;AAvDM,SAAS,gBAAgB,CAAC,UAAU,EAAE,QAAQ,EAAE;AACrD,MAAM,0BAA0B,GAAG,YAP7B,sBAAsB,EAQ1B,WATkB,YAAY,EASjB,UAAU,CAAC,CACzB,CAAC;AACF,MAAM,OAAO,GAAG,iBAAO,OAAO,CAAC,0BAA0B,CAAC,CAAC;;AAE3D,mBAAO,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;CAChC;;;;;;;;;;;;AAAA,AAUD,SAAS,WAAW,CAAC,MAAM,EAAE,QAAQ,EAAE;AACrC,MAAM,SAAS,GAAG,iBAAO,MAAM,CAC7B,eAAK,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,YAAY,CAAC,SA1BvC,WAAW,CA4BjB,CAAC;;AAEF,mBAAO,IAAI,CACT,iBAAO,OAAO,CACZ,iBAAO,GAAG,CAAC,SAAS,UA/BM,wBAAwB,CA+BH,CAChD,EACD,QAAQ,CACT,CAAC;CACH;;;;;;;;;AAAA","file":"runner.js","sourcesContent":["import lodash from 'lodash';\nimport glob from 'glob';\nimport { isEmptyFile, trimNewlines } from './utils';\nimport {extractTestsFromString, getDescriptionsFromFiles} from './parser';\n\n/* eslint-disable */ /* jshint ignore:start */\nimport { should } from 'chai';\n/* jshint ignore:end */ /* eslint-enable */\n\nexport function forEachAssertion(assertions, callback) {\n  const mapAssertionFromAssertions = extractTestsFromString(\n    trimNewlines(assertions)\n  );\n  const flatten = lodash.flatten(mapAssertionFromAssertions);\n\n  lodash.each(flatten, callback);\n}\n\n/**\n * Search for all tests.\n *\n * @param  {Array}    config\n * @param  {Function} callback\n *\n * @return {[type]}\n */\nfunction forEachTest(config, callback) {\n  const testFiles = lodash.reject(\n    glob.sync(config.testDirPath + '/**/*.styl'),\n    isEmptyFile\n  );\n\n  lodash.each(\n    lodash.flatten(\n      lodash.map(testFiles, getDescriptionsFromFiles)\n    ),\n    callback\n  );\n}\n\n/**\n * Run stylus tests by mocha.\n *\n * @param  {Array} config\n *\n * @return {[type]}\n */\nexport default function(config) {\n  forEachTest(config, function(description) {\n    // sets up describe\n    describe(description.module, function() {\n      describe(description.title, function() {\n        // run through each description\n        // get test from @it and @expect\n        // add to array\n        // pass each array item through the it callback function\n        forEachAssertion(description.assertions, function(test) {\n          it(test.assertion, function() {\n            test.run(config);\n          });\n        });\n      });\n    });\n  });\n}\n"]}