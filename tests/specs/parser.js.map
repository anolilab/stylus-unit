{"version":3,"sources":["../../src/parser.js"],"names":[],"mappings":";;;;;;;;kBAAe,IAAI;;;;oBACI,MAAM;;sBACV,QAAQ;;;;qBACqB,SAAS;;sBAC9B,UAAU;;;;;;;;;;;AASrC,SAAS,cAAc,CAAC,IAAI,EAAE;AAC5B,MAAM,YAAY,GAAG,oBAAa,gBAAG,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;;AAEjE,SAAO,YAAY,CAAC;CACrB;;;;;;;;;AASD,SAAS,4BAA4B,CAAC,MAAM,EAAE;AAC5C,MAAI,OAAO,GAAG,MAAM,CAAC;;AAErB,MAAI,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AAC5C,WAAO,GAAG,yBAAyB,GAAG,OAAO,CAAC;GAC/C;;AAED,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;;AAE7C,SAAO;AACL,SAAK,EAAE,KAAK;AACZ,cAAU,EAAE,UAAU;GACvB,CAAC;CACH;;;;;;;;;AASD,SAAS,6BAA6B,CAAC,MAAM,EAAE;AAC7C,MAAM,QAAQ,GAAG,oBAAO,MAAM,CAC5B,MAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC,iBAE5C,CAAC;;AAEF,SAAO,oBAAO,GAAG,CAAC,QAAQ,EAAE,4BAA4B,CAAC,CAAC;CAC3D;;;;;;;;;;AAUD,SAAS,aAAa,CAAC,MAAM,EAAE,SAAS,EAAE;AACxC,MAAM,OAAO,GAAG,MAAM,CAAC;AACvB,MAAM,YAAY,GAAG,OAAO,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC,GAAG,qBAE/D,CAAC;AACF,MAAM,WAAW,GAAG,gBAAS,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;;AAE5D,SAAO;AACL,aAAS,EAAE,SAAS;AACpB,OAAG,EAAE,aAAS,MAAM,EAAE;AACpB,0BAAe,YAAY,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,UAAS,SAAS,EAAE;AACjE,iBAAS,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;OACrC,CAAC,CAAC;KACJ;GACF,CAAC;CACH;;;;;;;;;;AAUD,SAAS,aAAa,CAAC,MAAM,EAAE,SAAS,EAAE;AACxC,MAAM,OAAO,GAAG,MAAM,CAAC;AACvB,MAAM,MAAM,GAAG,AAAC,OAAO,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC,GAAG,qBAAc,CAAE,CAAC,CAAC,CAAC;AAC9E,MAAI,KAAK,GAAG,AAAC,wBAAwB,CAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;;AAExD,MAAI,OAAO,KAAK,AAAC,KAAK,WAAW,EAAE;AACjC,SAAK,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;GAC3B;;AAED,SAAO;AACL,aAAS,EAAE,SAAS;AACpB,OAAG,EAAE,aAAS,MAAM,EAAE;AACpB,mBAAO,MAAM,CACX,YAAW;AACT,4BAAe,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,YAAW,EAAE,CAAC,CAAC;OACtD,EACD,KAAK,CACN,CAAC;KACH;GACF,CAAC;CACH;;;;;;;;AAQD,SAAS,qBAAqB,CAAC,OAAO,EAAE;AACtC,MAAM,MAAM,GAAG,OAAO,CAAC;AACvB,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;;AAEtC,MAAI,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,EAAE;AACtC,WAAO,aAAa,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;GACvC,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,EAAE;AAC7C,WAAO,aAAa,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;GACvC;CACF;;;;;;;;;;AASM,SAAS,sBAAsB,CAAC,MAAM,EAAE;;;AAG7C,SAAO,oBAAO,GAAG,CACf,oBAAO,MAAM,CACX,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,iBAEtC,EACD,qBAAqB,CACtB,CAAC;CACH;;;;;;;;;;AASM,SAAS,wBAAwB,CAAC,IAAI,EAAE;AAC7C,SAAO,6BAA6B,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;CAC5D","file":"parser.js","sourcesContent":["import fs from 'fs';\nimport { assert } from 'chai';\nimport lodash from 'lodash';\nimport { trimNewlines, isEmpty, cleanCSS } from './utils';\nimport stylusRenderer from './stylus';\n\n/**\n * Get file content from path.\n *\n * @param  {String} path\n *\n * @return {String}\n */\nfunction getFileContent(path) {\n  const fileContents = trimNewlines(fs.readFileSync(path, 'utf8'));\n\n  return fileContents;\n}\n\n/**\n * Extract description and title from string.\n *\n * @param  {String} string\n *\n * @return {Object}\n */\nfunction extractDescriptionFromString(string) {\n  let content = string;\n\n  if (content.match(/.*/)[0].indexOf('it') > 0) {\n    content = 'no description found \\n' + content;\n  }\n\n  const title = content.match(/.*/)[0];\n  const assertions = content.replace(/.*/, '');\n\n  return {\n    title: title,\n    assertions: assertions,\n  };\n}\n\n/**\n * Extract descriptions from string.\n *\n * @param  {String} string\n *\n * @return {Array}\n */\nfunction extractDescriptionsFromString(string) {\n  const approved = lodash.reject(\n    string.split(/.*describe\\('([^\\)]+)'\\)\\s?/),\n    isEmpty\n  );\n\n  return lodash.map(approved, extractDescriptionFromString);\n}\n\n/**\n * Extract expect from test.\n *\n * @param  {String} string\n * @param  {String} assertion\n *\n * @return {Object}\n */\nfunction extractExpect(string, assertion) {\n  const content = string;\n  const stylusAndCss = content.split(/.*expect\\('([^\\)]+)'\\)/).map(\n    trimNewlines\n  );\n  const expectedCss = cleanCSS.minify(stylusAndCss[1]).styles;\n\n  return {\n    assertion: assertion,\n    run: function(config) {\n      stylusRenderer(stylusAndCss[0], config.stylus, function(actualCss) {\n        actualCss.should.equal(expectedCss);\n      });\n    },\n  };\n}\n\n/**\n * Extract throws from test string.\n *\n * @param  {String} string\n * @param  {String} assertion\n *\n * @return {Object}\n */\nfunction extractThrows(string, assertion) {\n  const content = string;\n  const stylus = (content.split(/.*throws\\('([^\\)]+)'\\)/).map(trimNewlines))[0];\n  let error = (/throws\\s*(?:\\/(.*)\\/)?/).exec(content)[1];\n\n  if (typeof(error) !== 'undefined') {\n    error = new RegExp(error);\n  }\n\n  return {\n    assertion: assertion,\n    run: function(config) {\n      assert.throws(\n        function() {\n          stylusRenderer(stylus, config.stylus, function() {});\n        },\n        error\n      );\n    },\n  };\n}\n\n/**\n *\n * @param  {String} content\n *\n * @return {Object}\n */\nfunction extractTestFromString(content) {\n  const string = content;\n  const assertion = string.match(/.*/)[0];\n  const test = string.replace(/.*/, '');\n\n  if (test.match(/expect\\('([^\\)]+)'\\)/)) {\n    return extractExpect(test, assertion);\n  } else if (test.match(/throws\\('([^\\)]+)'\\)/)) {\n    return extractThrows(test, assertion);\n  }\n}\n\n/**\n * Extract tests from string.\n *\n * @param  {String} string\n *\n * @return {Array}\n */\nexport function extractTestsFromString(string) {\n  // Filter empty strings out, it seems that the\n  // @it line leaves an empty string entry behind in the array\n  return lodash.map(\n    lodash.reject(\n      string.split(/.*it\\('([^\\)]+)'\\)\\s?/),\n      isEmpty\n    ),\n    extractTestFromString\n  );\n}\n\n/**\n * [getDescriptionsFromFiles description]\n *\n * @param  {String} path\n *\n * @return {Array}\n */\nexport function getDescriptionsFromFiles(path) {\n  return extractDescriptionsFromString(getFileContent(path));\n}\n"]}