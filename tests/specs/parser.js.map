{"version":3,"sources":["../../src/parser.js"],"names":[],"mappings":";;;;;;kBAAe,IAAI;;;;wBACE,WAAW;;;;sBACb,QAAQ;;;;qBACW,SAAS;;;;;;;;;AAS/C,SAAS,OAAO,CAAC,IAAI,EAAE;AACrB,MAAM,YAAY,GAAG,oBAAa,gBAAG,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;;AAEjE,SAAO,YAAY,CAAC;CACrB;;AAED,SAAS,4BAA4B,CAAC,MAAM,EAAE;AAC5C,MAAI,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;AAC5C,UAAM,GAAG,yBAAyB,GAAG,MAAM,CAAC;GAC7C;;AAED,MAAO,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;;AAE5C,SAAO;AACL,SAAK,EAAE,KAAK;AACZ,cAAU,EAAE,UAAU;GACvB,CAAC;CACH;;AAED,SAAS,6BAA6B,CAAC,MAAM,EAAE;AAC7C,MAAI,QAAQ,GAAG,oBAAO,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,iBAAU,CAAC;;AAEtE,SAAO,oBAAO,GAAG,CAAC,QAAQ,EAAE,4BAA4B,CAAC,CAAC;CAC3D;;AAED,SAAS,wBAAwB,CAAC,QAAQ,EAAE;AAC1C,MAAI,YAAY,GAAG,oBAAa,gBAAG,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;;AAEnE,SAAO,6BAA6B,CAAC,YAAY,CAAC,CAAC;CACpD;;;;;;;;;AASD,SAAS,qBAAqB,CAAC,OAAO,EAAE;AACtC,MAAM,KAAK,GAAG,wBAAwB,CAAC;AACvC,MAAI,IAAI,GAAG,OAAO,CAAC;AACnB,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAEtC,MAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAC/B,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,GAAG,qBAAc,CAAC;AACjE,MAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;;AAE9B,SAAO;AACL,eAAW,EAAE,YAAY,CAAC,CAAC,CAAC;AAC5B,eAAW,EAAE,YAAY,CAAC,CAAC,CAAC;AAC5B,eAAW,EAAE,2BAAc,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM;GAC3D,CAAC;CACH;;;;;;;;;AASD,SAAS,sBAAsB,CAAC,MAAM,EAAE;;;AAGtC,SAAO,oBAAO,GAAG,CACf,oBAAO,MAAM,CACX,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,iBAEvC,EACD,qBAAqB,CACtB,CAAC;CACH;;;;;;;;;;qBASc,UAAS,IAAI,EAAE;AAC5B,wBAAsB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;CACvC","file":"parser.js","sourcesContent":["import fs from 'fs';\nimport CleanCSS from 'clean-css';\nimport lodash from 'lodash';\nimport { trimNewlines, isEmpty } from './utils';\n\n/**\n * Get file content from path.\n *\n * @param  {String} path\n *\n * @return {String}\n */\nfunction getFile(path) {\n  const fileContents = trimNewlines(fs.readFileSync(path, 'utf8'));\n\n  return fileContents;\n}\n\nfunction extractDescriptionFromString(string) {\n  if (string.match(/.*/)[0].indexOf('@it') > 0) {\n    string = 'no description found \\n' + string;\n  }\n\n  const  title = string.match(/.*/)[0];\n  const assertions = string.replace(/.*/, '');\n\n  return {\n    title: title,\n    assertions: assertions,\n  };\n}\n\nfunction extractDescriptionsFromString(string) {\n  var approved = lodash.reject(string.split(/.*@describe\\s?/), isEmpty);\n\n  return lodash.map(approved, extractDescriptionFromString);\n}\n\nfunction getDescriptionsFromFiles(filePath) {\n  var fileContents = trimNewlines(fs.readFileSync(filePath, 'utf8'));\n\n  return extractDescriptionsFromString(fileContents);\n}\n\n/**\n * Extract @expect from test file content.\n *\n * @param  {Array} content\n *\n * @return {Object}\n */\nfunction extractTestFromString(content) {\n  const regex = /describe\\('([^\\)]+)'\\)/;\n  let test = content;\n  const descriptions = regex.exec(test);\n\n  test = test.replace(regex, '');\n  const stylusAndCss = test.split(/.*expect.*/i).map(trimNewlines);\n  test = test.replace(/.*/, '');\n\n  return {\n    description: descriptions[1],\n    givenStylus: stylusAndCss[0],\n    expectedCss: new CleanCSS().minify(stylusAndCss[1]).styles,\n  };\n}\n\n/**\n * Extract tests from string.\n *\n * @param  {String} string\n *\n * @return {Array}\n */\nfunction extractTestsFromString(string) {\n  // Filter empty strings out, it seems that the\n  // @it line leaves an empty string entry behind in the array\n  return lodash.map(\n    lodash.reject(\n      string.split(/it\\('([^\\)]+)'\\)\\s?/gmi),\n      isEmpty\n    ),\n    extractTestFromString\n  );\n}\n\n/**\n * Return parsed content.\n *\n * @param  {String} file\n *\n * @return {Array}\n */\nexport default function(file) {\n  extractTestsFromString(getFile(file));\n}\n"]}