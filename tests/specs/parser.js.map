{"version":3,"sources":["../../src/parser.js"],"names":[],"mappings":";;;;;;kBAAe,IAAI;;;;wBACE,WAAW;;;;sBACb,QAAQ;;;;qBACW,SAAS;;;;;;;;;AAS/C,SAAS,OAAO,CAAC,IAAI,EAAE;AACrB,MAAM,YAAY,GAAG,oBAAa,gBAAG,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;;AAEjE,SAAO,YAAY,CAAC;CACrB;;;;;;;;;AASD,SAAS,qBAAqB,CAAC,OAAO,EAAE;AACtC,MAAI,IAAI,GAAG,OAAO,CAAC;;AAEnB,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,GAAG,qBAAc,CAAC;AACjE,MAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;;AAE9B,SAAO;AACL,eAAW,EAAE,WAAW;AACxB,eAAW,EAAE,YAAY,CAAC,CAAC,CAAC;AAC5B,eAAW,EAAE,2BAAc,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM;GAC3D,CAAC;CACH;;;;;;;;;AASD,SAAS,sBAAsB,CAAC,MAAM,EAAE;;;AAGtC,SAAO,oBAAO,GAAG,CACf,oBAAO,MAAM,CACX,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,iBAEzB,EACD,qBAAqB,CACtB,CAAC;CACH;;;;;;;;;;qBASc,UAAS,IAAI,EAAE;AAC5B,wBAAsB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;CACvC","file":"parser.js","sourcesContent":["import fs from 'fs';\nimport CleanCSS from 'clean-css';\nimport lodash from 'lodash';\nimport { trimNewlines, isEmpty } from './utils';\n\n/**\n * Get file content from path.\n *\n * @param  {String} path\n *\n * @return {String}\n */\nfunction getFile(path) {\n  const fileContents = trimNewlines(fs.readFileSync(path, 'utf8'));\n\n  return fileContents;\n}\n\n/**\n * Extract @expect from test file content.\n *\n * @param  {Array} content\n *\n * @return {Object}\n */\nfunction extractTestFromString(content) {\n  let test = content;\n\n  const description = test.match(/.*/g)[0];\n  const stylusAndCss = test.split(/.*@expect.*/).map(trimNewlines);\n  test = test.replace(/.*/, '');\n\n  return {\n    description: description,\n    givenStylus: stylusAndCss[0],\n    expectedCss: new CleanCSS().minify(stylusAndCss[1]).styles,\n  };\n}\n\n/**\n * Extract tests from string.\n *\n * @param  {String} string\n *\n * @return {Array}\n */\nfunction extractTestsFromString(string) {\n  // Filter empty strings out, it seems that the\n  // @it line leaves an empty string entry behind in the array\n  return lodash.map(\n    lodash.reject(\n      string.split(/.*@it\\s?/),\n      isEmpty\n    ),\n    extractTestFromString\n  );\n}\n\n/**\n * Return parsed content.\n *\n * @param  {String} file\n *\n * @return {Array}\n */\nexport default function(file) {\n  extractTestsFromString(getFile(file));\n}\n"]}