{"version":3,"sources":["../../src/parser.js"],"names":[],"mappings":"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","file":"parser.js","sourcesContent":["import { assert } from 'chai';\nimport lodash from 'lodash';\nimport { trimNewlines, isEmpty, cleanCssMinify, getFileContent } from './utils';\nimport stylusRenderer from './stylus';\n\n/**\n * Extract description and title from string.\n *\n * @param  {String} string\n *\n * @return {Object}\n */\nfunction extractDescriptionFromString(string) {\n  let content = string;\n  const describeRegex = /describe\\('([^\\)]+)'\\)/;\n\n  if (content.match(/.*/)[0].indexOf('it') > 0) {\n    content = 'describe(' + 'no description found' + ')' + ' \\n' + content;\n  }\n\n  const title = content.match(describeRegex)[1];\n  const assertions = content.replace(describeRegex, '');\n\n  return {\n    title: title,\n    assertions: assertions,\n  };\n}\n\n/**\n * Extract descriptions from string.\n *\n * @param  {String} string\n *\n * @return {Array}\n */\nfunction extractDescriptionsFromString(string) {\n  let content = string;\n  const regexModule = /module\\('([^\\)]+)'\\)/;\n\n  if (!regexModule.test(content)) {\n    throw new ReferenceError('All test need a module(\"Module Name\") function.');\n  }\n\n  const module = content.match(regexModule);\n  content = content.replace(regexModule, '');\n  const approved = lodash.reject(\n    content.split(/describe\\(\\)\\s?/),\n    isEmpty\n  );\n\n  const map = lodash.map(\n    approved,\n    extractDescriptionFromString\n  );\n  map[0].module = module[1];\n\n  return map;\n}\n\n/**\n * Extract expect from test.\n *\n * @param  {String} string\n * @param  {String} assertion\n *\n * @return {Object}\n */\nfunction extractExpect(string, assertion) {\n  const content = string;\n  const stylusAndCss = content.split(/.*expect\\(\\)/).map(\n    trimNewlines\n  );\n  const expectedCss = cleanCssMinify(stylusAndCss[1]);\n\n  return {\n    assertion: assertion,\n    run: function(config) {\n      stylusRenderer(stylusAndCss[0], config.stylus, function(actualCss) {\n        actualCss.should.equal(expectedCss);\n      });\n    },\n    type: 'expect',\n  };\n}\n\n/**\n * Extract throws from test string.\n *\n * @param  {String} string\n * @param  {String} assertion\n *\n * @return {Object}\n */\nfunction extractThrows(string, assertion) {\n  const content = string;\n  const stylus = (content.split(/.*throws/).map(trimNewlines))[0];\n  let error = (/throws\\('([^\\)]+)'\\)/).exec(content)[1];\n\n  if (typeof(error) !== 'undefined') {\n    error = new RegExp(error);\n  }\n\n  return {\n    assertion: assertion,\n    run: function(config) {\n      assert.throws(\n        function() {\n          stylusRenderer(stylus, config.stylus, function() {});\n        },\n        error\n      );\n    },\n    type: 'throws',\n  };\n}\n\n/**\n *\n * @param  {String} content\n *\n * @return {Object}\n */\nfunction extractTestFromString(content) {\n  const string = content;\n  const assertion = string.match(/describe\\('([^\\)]+)'\\)/)[1];\n  const test = string.replace(/.*/, '');\n\n  if (test.match(/.*expect/)) {\n    return extractExpect(test, assertion);\n  } else if (test.match(/.*throws/)) {\n    return extractThrows(test, assertion);\n  }\n\n  return {};\n}\n\n/**\n * Extract tests from string.\n *\n * @param  {String} string\n *\n * @return {Array}\n */\nexport function extractTestsFromString(string) {\n  // Filter empty strings out, it seems that the\n  // @it line leaves an empty string entry behind in the array\n  return lodash.map(\n    lodash.reject(\n      string.split(/.*it\\('([^\\)]+)'\\)\\s?/),\n      isEmpty\n    ),\n    extractTestFromString\n  );\n}\n\n/**\n * [getDescriptionsFromFiles description]\n *\n * @param  {String} path\n *\n * @return {Array}\n */\nexport function getDescriptionsFromFiles(path) {\n  return extractDescriptionsFromString(getFileContent(path));\n}\n"]}